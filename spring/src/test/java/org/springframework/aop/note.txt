
OOP:软件从上到下的分析
AOP:从左到右的功能分析

AOP的几个概念:

 连接点（Jointpoint）(那个方法上面干)：

 在AOP中表示为“在哪里干” ,
 表示需要在程序中插入横切关注点的扩展点，
 连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点；


 切入点（Pointcut）(那些方法上面干)：

 选择一组相关连接点的模式，即可以认为连接点的集合，
 Spring支持perl5正则表达式和AspectJ切入点模式，
 Spring默认使用AspectJ语法，在AOP中表示为“在哪里干的集合”；

 通知（Advice） (怎么干)：

 在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段
 在AOP中表示为“干什么”.指的是切面组件在连接点上执行的劢作。
 例如：在方法调用前、方法调用后、方法调用前后等。


 方面/切面（Aspect）（干什么）：

 横切关注点的模块化，比如上边提到的日志组件。
 可以认为是通知、引入和切入点的组合；
 在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为“在哪干和干什么集合”



 目标对象（Target Object）(对谁干 ，通常是被spring通过代理来执行的)：
 需要被织入横切关注点的对象，即该对象是切入点选择的对象，
 需要被通知的对象，从而也可称为“被通知对象”；
 由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为“对谁干”

 ===============================================================================
beforeAdvice

1）切入点匹配：

    在配置中使用“execution(* spring.aop.service..*(..))) ”匹配目标方法sayBefore，
    且使用“args(param)”匹配目标方法只有一个参数且传入的参数类型为通知实现方法中同名的参数类型；
    也就是 method="beforeAdvice(java.lang.Integer)"中指定的类型.
    如果 目前方法时string,此时配置的是Integer,将不会匹配.

2）目标方法定义：

    使用method=" beforeAdvice(java.lang.String) "指定前置通知实现方法，
    且该通知有一个参数类型为java.lang.String参数；

3）目标方法参数命名：
    其中使用arg-names=" param "指定通知实现方法参数名为“param”，
    切入点中使用“args(param)”匹配的目标方法参数将自动传递给通知实现方法同名参数。
    这里的意思是将 args(param)中的参数传递给 arg-names="param"参数，通过byName的方式.




afterReturning

<aop:after-returning pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"
    method="后置返回通知实现方法名"
    arg-names="后置返回通知实现方法参数列表参数名字"
    returning="目标方法返回值对应的后置返回通知实现方法参数名"
/>
 returning：定义一个名字，该名字用于匹配通知实现方法的一个参数名，当目标方法执行正常返回后，
 将把目标方法返回值传给通知方法；
 returning限定了只有目标方法返回值匹配与通知方法相应参数类型时才能执行后置返回通知，
 否则不执行，对于returning对应的通知方法参数为Object类型将匹配任何目标返回值



afterThrowing

 <aop:after-throwing pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"
 method="后置异常通知实现方法名"
 arg-names="后置异常通知实现方法参数列表参数名字"
 throwing="目标方法将抛出的异常赋值给的通知实现方法参数名"/>

throwing：定义一个名字，该名字用于匹配通知实现方法的一个参数名，当目标方法抛出异常返回后，
将把目标方法抛出的异常传给通知方法；
throwing限定了只有目标方法抛出的异常匹配与通知方法相应参数异常类型时才能执行后置异常通知，
否则不执行，对于throwing对应的通知方法参数为Throwable类型将匹配任何异常。


后置最终通知
afterFinalReturning

<aop:after pointcut="切入点表达式"  pointcut-ref="切入点Bean引用"
method="后置最终通知实现方法名"
 arg-names="后置最终通知实现方法参数列表参数名字"/>


环绕通知：
环绕着在切入点选择的连接点处的方法所执行的通知，环绕通知非常强大，
可以决定目标方法是否执行，什么时候执行，执行时是否需要替换方法参数，
执行完毕是否需要替换返回值，可通过<aop:aspect>标签下的<aop:around >标签声明：



6.3.5 Advisor

Advisor表示只有一个通知和一个切入点的切面，由于Spring AOP都是基于AOP联盟的拦截器模型的环绕通知的，
所以引入Advisor来支持各种通知类型（如前置通知等5种），Advisor概念来自于Spring1.2对AOP的支持，在AspectJ中没有相应的概念对应。
Advisor可以使用<aop:config>标签下的<aop:advisor>标签定义：

<aop:advisor pointcut="切入点表达式" pointcut-ref="切入点Bean引用"
                     advice-ref="自定义实现某个通知的bean"/

pointcut和pointcut-ref：二者选一，指定切入点表达式；
advice-ref：引用通知API实现Bean，如前置通知接口为MethodBeforeAdvice；

在此我们只介绍了前置通知API，其他类型的在后边章节介绍。
    不推荐使用Advisor，除了在进行事务控制的情况下，其他情况一般不推荐使用该方式，该方式属于侵入式设计，必须实现通知API。


arg-names：指定通知实现方法的参数名字，多个用“，”分隔，可选，类似于【3.1.2 构造器注入】中的参数名注入限制：在class文件中没生成变量调试信息是获取不到方法参数名字的，因此只有在类没生成变量调试信息时才需要使用arg-names属性来指定参数名，如arg-names="param"表示通知实现方法的参数列表的第一个参数名字为“param”。


=========================================
注解
========================================

1）使用@Aspect将POJO声明为切面；
2）使用@Pointcut进行命名切入点声明，同时指定目标方法第一个参数类型必须是java.lang.String，对于其他匹配的方法但参数类型不一致的将也是不匹配的，通过argNames = "param"指定了将把该匹配的目标方法参数传递给通知同名的参数上；
3）使用@Before进行前置通知声明，其中value用于定义切入点表达式或引用命名切入点；
4）配置文件需要使用<aop:aspectj-autoproxy/>来开启注解风格的@AspectJ支持；
5）需要将切面注册为Bean，如“aspect”Bean



@Before(value = "切入点表达式或命名切入点", argNames = "参数列表参数名")

value：指定切入点表达式或命名切入点；
rgNames：与Schema方式配置中的同义。


@AfterReturning(
    value="切入点表达式或命名切入点",
    pointcut="切入点表达式或命名切入点",
    argNames="参数列表参数名",
    returning="返回值对应参数名" )

value：指定切入点表达式或命名切入点；
pointcut：同样是指定切入点表达式或命名切入点，如果指定了将覆盖value属性指定的，pointcut具有高优先级；
argNames：与Schema方式配置中的同义；
returning：与Schema方式配置中的同义。


@AfterThrowing (
    value="切入点表达式或命名切入点",
    pointcut="切入点表达式或命名切入点",
    argNames="参数列表参数名",
    throwing="异常对应参数名")

value：指定切入点表达式或命名切入点；
pointcut：同样是指定切入点表达式或命名切入点，如果指定了将覆盖value属性指定的，pointcut具有高优先级；
argNames：与Schema方式配置中的同义；
throwing：与Schema方式配置中的同义。



@After (value="切入点表达式或命名切入点",argNames="参数列表参数名")

value：指定切入点表达式或命名切入点；
argNames：与Schema方式配置中的同义


@Around (value="切入点表达式或命名切入点", argNames="参数列表参数名")

value：指定切入点表达式或命名切入点；
argNames：与Schema方式配置中的同义；


===========================================
类型匹配语法
===========================================
首先让我们来了解下AspectJ类型匹配的通配符：
* ：匹配任何数量字符；
..：（两个点）匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。
+ ：匹配指定类型的子类型；仅能作为后缀放在类型模式后边。


============================================================================
参数传递
============================================================================
在Spring AOP中，除了execution和bean指示符不能传递参数给通知方法，
其他指示符都可以将匹配的相应参数或对象自动传递给通知方法。

@Before(value="execution(* test(*)) && args(param)", argNames="param")
public void before1(String param) {
    System.out.println("===param:" + param);
}


       切入点表达式execution(* test(*)) && args(param) ：

1）首先execution(* test(*))匹配任何方法名为test，且有一个任何类型的参数；
2）args(param)将首先查找通知方法上同名的参数，并在方法执行时（运行时）匹配传入的参数是使用该同名参数类型，
即java.lang.String；如果匹配将把该被通知参数传递给通知方法上同名参数。
其他指示符（除了execution和bean指示符）都可以使用这种方式进行参数绑定。